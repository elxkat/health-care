{"version":3,"sources":["redux/healthCareReducer.ts","redux/actionTypes.ts","components/layouts/dualLayout/dualLayout.tsx","components/stateCombo/stateCombo.tsx","components/layouts/field/field.tsx","components/header/header.tsx","components/results/resultView.tsx","components/results/results.tsx","components/fieldSelection/fieldSelection.tsx","components/app/app.tsx","redux/actions.ts","redux/thunks.ts","components/app/index.ts","redux/index.ts","index.tsx","components/app/app.module.scss","components/results/results.module.scss","components/layouts/dualLayout/dualLayout.module.scss","components/results/resultView.module.scss","components/fieldSelection/fieldSelection.module.scss","components/stateCombo/stateCombo.module.scss","components/layouts/field/field.module.scss","components/header/header.module.scss"],"names":["resultItemFields","initialSliceState","isFiltersOpen","isLoading","min_discharges","undefined","max_discharges","min_average_medicare_payments","max_average_medicare_payments","min_average_covered_charges","max_average_covered_charges","state","fields","results","filterFieldNames","fieldNames","Object","objectSpread","healthCareReducer","handleActions","defineProperty","action","payload","fieldName","value","DualLayout","props","children","React","Children","toArray","className","otherProps","objectWithoutProperties","react_default","a","createElement","assign","classNames","styles","dualLayout","child","StringSelect","Select","ofType","stateItemDisplay","item","concat","name","code","StateCombo","react","scrollToActiveItem","activeItem","items","states","filterable","onItemSelect","onValueChange","itemRenderer","itemProps","buttons","key","comboItem","onClick","handleClick","minimal","text","rightIcon","Field","_React$PureComponent","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","_this$props","title","component","field","html","PureComponent","Header","header","location","reload","ResultView","fieldsToDisplay","card","interactive","elevation","Elevation","THREE","keys","map","dualLayout_DualLayout","resultItem","Results","_React$useState","_React$useState2","slicedToArray","page","setPage","pageIndex","container","inner","slice","resultView_ResultView","dist_default","onPageChange","selectedItem","selected","previousLabel","nextLabel","breakLabel","activeLinkClassName","pageLink","pageClassName","pageCount","length","marginPagesDisplayed","pageRangeDisplayed","containerClassName","pagination","activeClassName","activePage","FieldSelection","fieldsFromString","controls","checked","label","onChange","fieldsToString","fieldsStr","split","reduce","obj","selectedFields","str","currFieldName","StateField","NumberField","StringField","App","_React$Component","setHealthCareField","search","app","header_Header","icon","intent","Intent","PRIMARY","large","searchButton","collapse","isOpen","keepChildrenMounted","filtersRow","Fragment","NumericInput","results_Results","backdrop","spinner","size","Component","createAction","getFilterString","healthCareStoreSlice","filterString","entries","entry","Error","getFilterValue","join","wrapFieldsForQuery","dispatch","getState","healthCare","retryFn","fetch","credentials","mode","headers","Accept-Encoding","Content-Type","Keep-Alive","then","_ref","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","ok","json","sent","stop","_x","searchFunction","fn","times","retryFnInternal","_x2","_retryFnInternal","_callee2","n","timeout","_context2","t0","Math","pow","random","abrupt","setTimeout","min","connect","reducerMap","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","ReduxThunk","ReactDOM","render","es","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.3ad720d6.chunk.js","sourcesContent":["import {Action, handleActions} from \"redux-actions\";\r\nimport * as ActionTypes from \"./actionTypes\";\r\nimport {SetHealthCareFieldPayload} from \"./actions\";\r\n\r\nexport interface HealthCareStoreSlice {\r\n  // view settings\r\n  isFiltersOpen: boolean;\r\n  isLoading: boolean;\r\n\r\n  // filters values\r\n  min_discharges: number | undefined;\r\n  max_discharges: number | undefined;\r\n  min_average_covered_charges: number | undefined;\r\n  max_average_covered_charges: number | undefined;\r\n  min_average_medicare_payments: number | undefined;\r\n  max_average_medicare_payments: number | undefined;\r\n  state: StateItem | undefined;\r\n\r\n  // fields selection\r\n  fields: string | undefined;\r\n\r\n  results: ResultItem[];\r\n}\r\n\r\nexport interface StateItem {\r\n  name: string;\r\n  code: string;\r\n}\r\n\r\nexport interface ResultItem {\r\n  [\"DRG Definition\"]: string;\r\n  [\"Provider Id\"]: string;\r\n  [\"Provider Name\"]: string;\r\n  [\"Provider Street Address\"]: string;\r\n  [\"Provider City\"]: string;\r\n  [\"Provider State\"]: string;\r\n  [\"Provider Zip Code\"]: string;\r\n  [\"Hospital Referral Region Description\"]: string;\r\n  [\"Total Discharges\"]: number;\r\n  [\"Average Covered Charges\"]: string;\r\n  [\"Average Total Payments\"]: string;\r\n  [\"Average Medicare Payments\"]: string;\r\n}\r\n\r\nexport const resultItemFields: Array<keyof ResultItem> = [\r\n  \"DRG Definition\",\r\n  \"Provider Id\",\r\n  \"Provider Name\",\r\n  \"Provider Street Address\",\r\n  \"Provider City\",\r\n  \"Provider State\",\r\n  \"Provider Zip Code\",\r\n  \"Hospital Referral Region Description\",\r\n  \"Total Discharges\",\r\n  \"Average Covered Charges\",\r\n  \"Average Total Payments\",\r\n  \"Average Medicare Payments\",\r\n];\r\n\r\nexport const initialSliceState: HealthCareStoreSlice = {\r\n  isFiltersOpen: false,\r\n  isLoading: false,\r\n  min_discharges: undefined,\r\n  max_discharges: undefined,\r\n  min_average_medicare_payments: undefined,\r\n  max_average_medicare_payments: undefined,\r\n  min_average_covered_charges: undefined,\r\n  max_average_covered_charges: undefined,\r\n  state: undefined,\r\n  fields: undefined,\r\n  results: [],\r\n};\r\n\r\nexport const filterFieldNames: { [fieldName: string]: string } = {\r\n  min_discharges: \"min_discharges\",\r\n  max_discharges: \"max_discharges\",\r\n  min_average_medicare_payments: \"min_average_medicare_payments\",\r\n  max_average_medicare_payments: \"max_average_medicare_payments\",\r\n  min_average_covered_charges: \"min_average_covered_charges\",\r\n  max_average_covered_charges: \"max_average_covered_charges\",\r\n  state: \"state\",\r\n};\r\n\r\nexport const fieldNames: Record<keyof HealthCareStoreSlice, string> = {\r\n  ...filterFieldNames as any,\r\n  isFiltersOpen: \"isFiltersOpen\",\r\n  isLoading: \"isLoading\",\r\n  fields: \"fields\",\r\n  results: \"results\",\r\n};\r\n\r\nexport const healthCareReducer = handleActions({\r\n  [ActionTypes.setHealthCareField]: (state: HealthCareStoreSlice, action: Action<SetHealthCareFieldPayload>) => {\r\n    return { ...state, [action.payload!.fieldName]: action.payload!.value };\r\n  },\r\n}, initialSliceState);","\r\nexport const setHealthCareField = \"setHealthCareField\";","import React from \"react\";\r\nimport styles from './dualLayout.module.scss';\r\nimport classNames from 'classnames';\r\n\r\nexport const DualLayout: React.FunctionComponent<React.HTMLAttributes<HTMLDivElement>> = (props) => {\r\n  const children = React.Children.toArray(props.children);\r\n  const { className, ...otherProps } = props;\r\n  // TODO - warning about discarding of children in case of > 2\r\n  return (\r\n    <div className={classNames(styles.dualLayout, className)} {...otherProps}>\r\n      <div className={styles.child}>\r\n        {children[0]}\r\n      </div>\r\n      <div className={styles.child}>\r\n        {children[1]}\r\n      </div>\r\n    </div>\r\n  );\r\n};","import * as React from \"react\";\r\nimport {Select} from \"@blueprintjs/select\";\r\nimport {Button} from \"@blueprintjs/core\";\r\nimport {StateItem} from \"../../redux/healthCareReducer\";\r\nimport styles from './stateCombo.module.scss';\r\n\r\nexport interface StateComboProps {\r\n  value?: StateItem;\r\n  onValueChange?: (state: StateItem) => void;\r\n}\r\n\r\nconst StringSelect = Select.ofType<StateItem>();\r\n\r\nexport const stateItemDisplay = (item?: StateItem) => item ? `${item.name} (${item.code})` : \"\";\r\n\r\nexport type StateCombo = React.FunctionComponent<StateComboProps>;\r\nexport const StateCombo: React.FunctionComponent<StateComboProps> = (props) => {\r\n  return (\r\n    <StringSelect\r\n      scrollToActiveItem={true}\r\n      activeItem={props.value}\r\n      items={states as StateItem[]}\r\n      filterable={false}\r\n      onItemSelect={props.onValueChange!}\r\n      itemRenderer={(item, itemProps) => <Button key={item ? item.code : \"empty\"} className={styles.comboItem} onClick={itemProps.handleClick} minimal={true}>{stateItemDisplay(item)}</Button>}\r\n    >\r\n      <Button text={stateItemDisplay(props.value)} rightIcon=\"double-caret-vertical\"/>\r\n    </StringSelect>\r\n  );\r\n};\r\n\r\nconst states: Array<StateItem | undefined> = [\r\n  undefined,\r\n  {code: \"AK\", name: \"Alaska\"},\r\n  {code: \"AL\", name: \"Alabama\"},\r\n  {code: \"AR\", name: \"Arkansas\"},\r\n  {code: \"AS\", name: \"American Samoa\"},\r\n  {code: \"AZ\", name: \"Arizona\"},\r\n  {code: \"CA\", name: \"California\"},\r\n  {code: \"CO\", name: \"Colorado\"},\r\n  {code: \"CT\", name: \"Connecticut\"},\r\n  {code: \"DC\", name: \"District of Columbia\"},\r\n  {code: \"DE\", name: \"Delaware\"},\r\n  {code: \"FL\", name: \"Florida\"},\r\n  {code: \"GA\", name: \"Georgia\"},\r\n  {code: \"GU\", name: \"Guam\"},\r\n  {code: \"HI\", name: \"Hawaii\"},\r\n  {code: \"IA\", name: \"Iowa\"},\r\n  {code: \"ID\", name: \"Idaho\"},\r\n  {code: \"IL\", name: \"Illinois\"},\r\n  {code: \"IN\", name: \"Indiana\"},\r\n  {code: \"KS\", name: \"Kansas\"},\r\n  {code: \"KY\", name: \"Kentucky\"},\r\n  {code: \"LA\", name: \"Louisiana\"},\r\n  {code: \"MA\", name: \"Massachusetts\"},\r\n  {code: \"MD\", name: \"Maryland\"},\r\n  {code: \"ME\", name: \"Maine\"},\r\n  {code: \"MI\", name: \"Michigan\"},\r\n  {code: \"MN\", name: \"Minnesota\"},\r\n  {code: \"MO\", name: \"Missouri\"},\r\n  {code: \"MS\", name: \"Mississippi\"},\r\n  {code: \"MT\", name: \"Montana\"},\r\n  {code: \"NC\", name: \"North Carolina\"},\r\n  {code: \"ND\", name: \" North Dakota\"},\r\n  {code: \"NE\", name: \"Nebraska\"},\r\n  {code: \"NH\", name: \"New Hampshire\"},\r\n  {code: \"NJ\", name: \"New Jersey\"},\r\n  {code: \"NM\", name: \"New Mexico\"},\r\n  {code: \"NV\", name: \"Nevada\"},\r\n  {code: \"NY\", name: \"New York\"},\r\n  {code: \"OH\", name: \"Ohio\"},\r\n  {code: \"OK\", name: \"Oklahoma\"},\r\n  {code: \"OR\", name: \"Oregon\"},\r\n  {code: \"PA\", name: \"Pennsylvania\"},\r\n  {code: \"PR\", name: \"Puerto Rico\"},\r\n  {code: \"RI\", name: \"Rhode Island\"},\r\n  {code: \"SC\", name: \"South Carolina\"},\r\n  {code: \"SD\", name: \"South Dakota\"},\r\n  {code: \"TN\", name: \"Tennessee\"},\r\n  {code: \"TX\", name: \"Texas\"},\r\n  {code: \"UT\", name: \"Utah\"},\r\n  {code: \"VA\", name: \"Virginia\"},\r\n  {code: \"VI\", name: \"Virgin Islands\"},\r\n  {code: \"VT\", name: \"Vermont\"},\r\n  {code: \"WA\", name: \"Washington\"},\r\n  {code: \"WI\", name: \"Wisconsin\"},\r\n  {code: \"WV\", name: \"West Virginia\"},\r\n  {code: \"WY\", name: \"Wyoming\"},\r\n];","import {Label} from \"@blueprintjs/core\";\r\nimport React from \"react\";\r\nimport styles from './field.module.scss';\r\n\r\nexport interface FieldProps<T> {\r\n  title: string;\r\n  component: React.ComponentType;\r\n  value: T;\r\n  onValueChange: (value: T) => void;\r\n}\r\n\r\nexport class Field<T> extends React.PureComponent<FieldProps<T>> {\r\n\r\n  public static ofType<T>() {\r\n    return Field as new (props: FieldProps<T>) => Field<T>;\r\n  }\r\n  public render(): React.ReactNode {\r\n    const { title, onValueChange, value, component } = this.props;\r\n\r\n    return (\r\n        <div className={styles.field}>\r\n          <Label>{title}\r\n            {React.createElement(component as any, { value, onValueChange })}\r\n          </Label>\r\n        </div>\r\n    );\r\n  }\r\n}","import React from \"react\";\r\nimport styles from './header.module.scss';\r\nimport {H1} from \"@blueprintjs/core\";\r\n\r\nexport const Header: React.FunctionComponent = () => {\r\n  return (\r\n    <H1 className={styles.header} onClick={() => location.reload()}>Health-Care Providers Search</H1>\r\n  );\r\n};","import * as React from \"react\";\r\nimport {Card, Elevation, H5} from \"@blueprintjs/core\";\r\nimport {ResultItem} from \"../../redux/healthCareReducer\";\r\nimport {DualLayout} from \"../layouts/dualLayout/dualLayout\";\r\nimport styles from './resultView.module.scss';\r\n\r\nexport interface ResultViewProps {\r\n  item: ResultItem;\r\n}\r\nexport const ResultView: React.FunctionComponent<ResultViewProps> = (props) => {\r\n  const { item } = props;\r\n  const fieldsToDisplay = item as ResultItem & { [fieldName: string]: any };\r\n  return (\r\n    <Card interactive={false} elevation={Elevation.THREE}>\r\n      <H5 className={styles.title}>{item[\"Provider Name\"]}</H5>\r\n      {Object.keys(item).map((fieldName) => {\r\n        if (fieldsToDisplay[fieldName] === undefined || fieldName === \"Provider Name\") {\r\n          return;\r\n        }\r\n        return (\r\n          <DualLayout key={fieldName} className={styles.resultItem}>\r\n          <div>{fieldName}:</div>\r\n          <div>{fieldsToDisplay[fieldName]}</div>\r\n        </DualLayout>);\r\n      })}\r\n    </Card>\r\n  );\r\n};","import {ResultItem} from \"../../redux/healthCareReducer\";\r\nimport * as React from \"react\";\r\nimport {ResultView} from \"./resultView\";\r\nimport ReactPaginate from 'react-paginate';\r\nimport styles from './results.module.scss';\r\n\r\nexport interface ResultsProps {\r\n  results: ResultItem[];\r\n}\r\n\r\nconst pageSize = 20;\r\n\r\nexport const Results: React.FunctionComponent<ResultsProps> = (props) => {\r\n\r\n  const { results } = props;\r\n  const [page, setPage] = React.useState(0);\r\n  const pageIndex = page * pageSize;\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.inner}>\r\n        {results.slice(pageIndex, pageIndex + 100).map((item) => <ResultView key={item[\"DRG Definition\"] + item[\"Provider Id\"]} item={item} />)}\r\n      </div>\r\n      <ReactPaginate\r\n        onPageChange={(selectedItem) => setPage(selectedItem.selected)}\r\n        previousLabel={'<'}\r\n        nextLabel={'>'}\r\n        breakLabel={'...'}\r\n        activeLinkClassName={styles.pageLink}\r\n        pageClassName={styles.page}\r\n        pageCount={results.length / pageSize}\r\n        marginPagesDisplayed={1}\r\n        pageRangeDisplayed={3}\r\n        containerClassName={styles.pagination}\r\n        activeClassName={styles.activePage}\r\n      />\r\n    </div>\r\n  );\r\n};","import {resultItemFields, StateItem} from \"../../redux/healthCareReducer\";\r\nimport {Checkbox} from \"@blueprintjs/core\";\r\nimport * as React from \"react\";\r\nimport styles from './fieldSelection.module.scss';\r\n\r\nexport interface FieldSelectionProps {\r\n  value?: string;\r\n  onValueChange?: (state: string) => void;\r\n}\r\n\r\nexport const FieldSelection: React.FunctionComponent<FieldSelectionProps> = (props) => {\r\n  const fields = fieldsFromString(props.value);\r\n  return (\r\n    <div className={styles.container}>\r\n      {resultItemFields.map((fieldName) =>\r\n        <Checkbox\r\n          className={styles.field}\r\n          key={fieldName}\r\n          checked={fields[fieldName]}\r\n          label={fieldName}\r\n          onChange={() => props.onValueChange!(fieldsToString(fields, fieldName))}\r\n        />)}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst fieldsFromString = (fieldsStr: string | undefined): { [fieldName: string]: boolean } => {\r\n  if (!fieldsStr) {\r\n    return {};\r\n  }\r\n  return fieldsStr.split(\",\").reduce((obj: { [fieldName: string]: boolean }, fieldName) => {\r\n    obj[fieldName] = true;\r\n    return obj;\r\n  }, {});\r\n};\r\n\r\nconst fieldsToString = (fields: { [fieldName: string]: boolean }, fieldName: string): string => {\r\n  fields[fieldName] = !fields[fieldName];\r\n  const selectedFields = Object.keys(fields).reduce((str, currFieldName) => {\r\n    str += fields[currFieldName] ? `${currFieldName},` : \"\";\r\n    return str;\r\n  }, \"\");\r\n\r\n  return selectedFields.slice(0, selectedFields.length - 1);\r\n};","import React from 'react';\nimport styles from './app.module.scss';\nimport {Button, Checkbox, Collapse, Intent, Label, NumericInput, Spinner} from \"@blueprintjs/core\";\nimport {fieldNames, HealthCareStoreSlice, StateItem} from \"../../redux/healthCareReducer\";\nimport {DualLayout} from '../layouts/dualLayout/dualLayout';\nimport {StateCombo} from \"../stateCombo/stateCombo\";\nimport {Field} from \"../layouts/field/field\";\nimport {Header} from \"../header/header\";\nimport {Results} from \"../results/results\";\nimport {FieldSelection} from \"../fieldSelection/fieldSelection\";\n\nexport interface AppStateProps extends HealthCareStoreSlice {\n}\n\nexport interface AppDispatchProps {\n  setHealthCareField: (fieldName: string, value: unknown) => void;\n  search: () => void;\n}\n\nconst StateField = Field.ofType<StateItem | undefined>();\nconst NumberField = Field.ofType<number | undefined>();\nconst StringField = Field.ofType<string | undefined>();\n\nexport class App extends React.Component<AppStateProps & AppDispatchProps> {\n  public render() {\n    const {\n      min_discharges, max_discharges, isFiltersOpen,\n      setHealthCareField, min_average_covered_charges, max_average_covered_charges,\n      min_average_medicare_payments,\n      max_average_medicare_payments,\n      state,\n      fields,\n      search,\n      results,\n      isLoading,\n    } = this.props;\n    return (\n      <div className={styles.app}>\n        <Header />\n        <Button icon=\"search\" onClick={() => search()} intent={Intent.PRIMARY} large={true} className={styles.searchButton}>Search!</Button>\n        <Button onClick={() => setHealthCareField(fieldNames.isFiltersOpen, !isFiltersOpen)}>{isFiltersOpen ? \"Hide\" : \"Show\"} Filters</Button>\n        <Collapse isOpen={isFiltersOpen} keepChildrenMounted={true}>\n          <DualLayout className={styles.filtersRow}>\n            <>\n              <NumberField\n                title={\"minimum # of discharges\"}\n                component={NumericInput}\n                value={min_discharges!}\n                onValueChange={(value) => setHealthCareField(fieldNames.min_discharges, value)}\n              />\n              <NumberField\n                title={\"minimum average covered charges\"}\n                component={NumericInput}\n                value={min_average_covered_charges!}\n                onValueChange={(value) => setHealthCareField(fieldNames.min_average_covered_charges, value)}\n              />\n              <NumberField\n                title={\"minium average medicare payments\"}\n                component={NumericInput}\n                value={min_average_medicare_payments!}\n                onValueChange={(value) => setHealthCareField(fieldNames.min_average_medicare_payments, value)}\n              />\n            </>\n            <>\n              <NumberField\n                title={\"maximum # of discharges\"}\n                component={NumericInput}\n                value={max_discharges!}\n                onValueChange={(value) => setHealthCareField(fieldNames.max_discharges, value)}\n              />\n              <NumberField\n                title={\"maximum average covered charges\"}\n                component={NumericInput}\n                value={max_average_covered_charges!}\n                onValueChange={(value) => setHealthCareField(fieldNames.max_average_covered_charges, value)}\n              />\n              <NumberField\n                title={\"maxium average medicare payments\"}\n                component={NumericInput}\n                value={max_average_medicare_payments!}\n                onValueChange={(value) => setHealthCareField(fieldNames.max_average_medicare_payments, value)}\n              />\n            </>\n          </DualLayout>\n          <StateField\n            title={\"select state\"}\n            component={StateCombo}\n            value={state}\n            onValueChange={(item) => setHealthCareField(fieldNames.state, item)}\n          />\n          <StringField\n            title={\"select fields or leave blank for all fields\"}\n            component={FieldSelection}\n            value={fields}\n            onValueChange={(value) => setHealthCareField(fieldNames.fields, value)}\n          />\n        </Collapse>\n        {results.length > 0 && <div className={styles.results}><Results results={results} /></div>}\n        {isLoading && <div className={styles.backdrop}><Spinner className={styles.spinner} intent={Intent.PRIMARY} size={100} /></div>}\n      </div>\n    );\n  }\n}","import {createAction} from \"redux-actions\";\r\nimport * as ActionTypes from \"./actionTypes\";\r\n\r\nexport interface SetHealthCareFieldPayload {\r\n  fieldName: string;\r\n  value: unknown;\r\n}\r\nexport const setHealthCareField = createAction<SetHealthCareFieldPayload, string, unknown>\r\n  (ActionTypes.setHealthCareField, (fieldName: string, value) => ({\r\n  fieldName,\r\n  value,\r\n}));","import {Dispatch} from \"redux\";\r\nimport {RootState} from \"./index\";\r\nimport {fieldNames, filterFieldNames, HealthCareStoreSlice} from \"./healthCareReducer\";\r\nimport {setHealthCareField} from \"./actions\";\r\n\r\nexport const rootApi = \"https://us-central1-health-care-db.cloudfunctions.net/api\";\r\n// export const rootApi = \"http://localhost:3001\";\r\n\r\nexport const getFilterValue = (value: NonNullable<any>): string => {\r\n  if (typeof value === \"object\") {\r\n    if (value.code) { // StateItem\r\n      return value.code;\r\n    }\r\n\r\n    throw new Error(\"getFilterValue - unrecognized filter object\");\r\n  }\r\n\r\n  return value;\r\n};\r\n\r\nexport const wrapFieldsForQuery = (fields: string): string => {\r\n  return fields.split(\",\").map((fieldName) => `\"${fieldName}\"`).join(\",\");\r\n};\r\n\r\nexport const getFilterString = (healthCareStoreSlice: HealthCareStoreSlice): string => {\r\n  let filterString = Object.entries(healthCareStoreSlice).reduce((str, entry) => {\r\n    if (filterFieldNames[entry[0]] && entry[1]) {\r\n      str += `${entry[0]}=${getFilterValue(entry[1])}&`;\r\n    }\r\n    return str;\r\n  }, \"?\");\r\n\r\n  if (healthCareStoreSlice.fields) {\r\n    const fields = wrapFieldsForQuery(healthCareStoreSlice.fields);\r\n    filterString = filterString.length === 1 ? `${filterString}fields=${fields}&` : `${filterString}&fields=${fields}&`;\r\n  }\r\n\r\n  filterString = filterString.length === 1 ? \"\" : filterString.slice(0, filterString.length - 1);\r\n\r\n  return filterString;\r\n};\r\n\r\nexport const search = () => (dispatch: Dispatch, getState: () => RootState) => {\r\n  const healthCareStoreSlice = getState().healthCare;\r\n\r\n  dispatch(setHealthCareField(fieldNames.isFiltersOpen, false));\r\n  dispatch(setHealthCareField(fieldNames.isLoading, true));\r\n  dispatch(setHealthCareField(fieldNames.results, []));\r\n\r\n  const searchFunction = retryFn(() => {\r\n    return fetch(`${rootApi}/providers${getFilterString(healthCareStoreSlice)}`, {\r\n      credentials: \"same-origin\",\r\n      mode: \"cors\",\r\n      headers: {\r\n        \"Accept-Encoding\": \"gzip, deflate, br\",\r\n        \"Content-Type\": \"application/json\",\r\n        \"Keep-Alive\": \"timeout=30\",\r\n      },\r\n    }).then(async (response) => {\r\n      if (response.ok) {\r\n        const results = await response.json();\r\n        dispatch(setHealthCareField(fieldNames.results, results));\r\n        dispatch(setHealthCareField(fieldNames.isLoading, false));\r\n      } else {\r\n        // TODO - error handling\r\n        dispatch(setHealthCareField(fieldNames.isLoading, false));\r\n      }\r\n    });\r\n  }, 3);\r\n\r\n  searchFunction();\r\n};\r\n\r\nconst retryFn = (fn: () => Promise<any>, times: number) => {\r\n  async function retryFnInternal(n: number) {\r\n    try {\r\n      await fn();\r\n    } catch (e) {\r\n      const timeout = Math.pow(2, n) + (Math.random() * 1000);\r\n      if (n >= times) {\r\n        return;\r\n      }\r\n      setTimeout(() => retryFnInternal(n + 1), Math.min(timeout, 20000));\r\n    }\r\n  }\r\n\r\n  return () => retryFnInternal(1);\r\n};","import {connect} from \"react-redux\";\r\nimport {App, AppDispatchProps, AppStateProps} from \"./app\";\r\nimport {RootState} from \"../../redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setHealthCareField} from \"../../redux/actions\";\r\nimport {fieldNames} from \"../../redux/healthCareReducer\";\r\nimport {search} from \"../../redux/thunks\";\r\n\r\nexport * from './app';\r\n\r\nfunction mapStateToProps(state: RootState): AppStateProps {\r\n  return {\r\n    ...state.healthCare,\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: any): AppDispatchProps {\r\n  return {\r\n    setHealthCareField: (fieldName, value) => dispatch(setHealthCareField(fieldName, value)),\r\n    search: () => dispatch(search()),\r\n  };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {healthCareReducer, HealthCareStoreSlice} from \"./healthCareReducer\";\r\nimport {combineReducers} from \"redux\";\r\nimport {Reducer} from \"redux-actions\";\r\n\r\nexport interface RootState {\r\n  healthCare: HealthCareStoreSlice;\r\n}\r\n\r\nconst reducerMap: Record<keyof RootState, Reducer<any, any>> = {\r\n  healthCare: healthCareReducer,\r\n};\r\n\r\nexport default combineReducers(reducerMap);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport AppContainer from './components/app';\nimport rootReducer from './redux';\nimport {applyMiddleware, compose, createStore} from \"redux\";\nimport {Provider} from \"react-redux\";\nimport ReduxThunk from 'redux-thunk';\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(ReduxThunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppContainer />\n  </Provider>,\n  document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__3mAUx\",\"searchButton\":\"app_searchButton__1bmQ3\",\"filtersRow\":\"app_filtersRow__32qFA\",\"spinner\":\"app_spinner__1lGh8\",\"results\":\"app_results__IicjD\",\"backdrop\":\"app_backdrop__37-Tt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"results_container__36gnh\",\"inner\":\"results_inner__201lW\",\"pagination\":\"results_pagination__1Vkhn\",\"page\":\"results_page__1xE9o\",\"activePage\":\"results_activePage__G5fZj\",\"pageLink\":\"results_pageLink__1UuBv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dualLayout\":\"dualLayout_dualLayout__3CpQF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"resultView_title__1E2B9\",\"resultItem\":\"resultView_resultItem__2oh-d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"fieldSelection_container__238sX\",\"field\":\"fieldSelection_field__aihCF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comboItem\":\"stateCombo_comboItem__1xjJ7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"field_field__1ymi-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__35CWp\"};"],"sourceRoot":""}